import os
import subprocess
from pptx import Presentation
from pptx.util import Pt
from pptx.enum.text import PP_ALIGN
from gtts import gTTS
from flask import Flask, request, jsonify
from transformers import pipeline
from PIL import Image, ImageDraw, ImageFont
import textwrap
import re

app = Flask(__name__)

# Load summarization pipeline
summarizer = pipeline('summarization', model='facebook/bart-large-cnn', device=0)

def summarize_text(text):
    """Summarize the text using the summarization model."""
    summary = summarizer(text, max_length=150, min_length=100, do_sample=False)
    return summary[0]['summary_text']

def create_pptx(topic, summary, code, pptx_path):
    """Create a PowerPoint presentation with topic, summary, and code."""
    prs = Presentation()

    # Title Slide
    slide = prs.slides.add_slide(prs.slide_layouts[0])
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    title.text = topic
    subtitle.text = 'Generated by CodeFlow'

    # Summary Slide
    slide = prs.slides.add_slide(prs.slide_layouts[1])
    title = slide.shapes.title
    content = slide.placeholders[1]
    title.text = 'Summary'
    content.text = summary
    format_text(content.text_frame, font_size=Pt(18))

    # Code Slide
    slide = prs.slides.add_slide(prs.slide_layouts[1])
    title = slide.shapes.title
    content = slide.placeholders[1]
    title.text = 'Code'
    content.text = code
    format_text(content.text_frame, font_size=Pt(16))

    prs.save(pptx_path)

def format_text(text_frame, font_size=Pt(18)):
    """Format the text in the text frame."""
    for paragraph in text_frame.paragraphs:
        paragraph.font.size = font_size
        paragraph.alignment = PP_ALIGN.LEFT

def convert_pptx_to_images(pptx_path, output_dir):
    """Convert PPTX file to images."""
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    prs = Presentation(pptx_path)
    for i, slide in enumerate(prs.slides):
        img_path = os.path.join(output_dir, f'slide_{i+1}.png')
        # Create an image with proper size
        img = Image.new('RGB', (1280, 720), color=(255, 255, 255))
        draw = ImageDraw.Draw(img)

        # Extract text from slide
        title = slide.shapes.title.text if slide.shapes.title else ""
        content = slide.placeholders[1].text if slide.placeholders[1] else ""

        # Use a truetype font
        try:
            font = ImageFont.truetype("arial.ttf", 24)
        except IOError:
            font = ImageFont.load_default()

        # Draw text on image
        draw_text(draw, title, (10, 10), font, (0, 0, 0))
        draw_text(draw, content, (10, 50), font, (0, 0, 0))

        img.save(img_path)

def draw_text(draw, text, position, font, color):
    """Draw wrapped text on an image."""
    wrapped_text = textwrap.fill(text, width=40)
    draw.text(position, wrapped_text, font=font, fill=color)

def create_audio_for_summary(summary, output_dir):
    """Create audio for the summary."""
    summary_audio_path = os.path.join(output_dir, 'summary.mp3')
    tts = gTTS(text=summary, lang='en')
    tts.save(summary_audio_path)
    return summary_audio_path

def create_audio_for_slides(pptx_path, output_dir):
    """Create audio for each slide's notes."""
    prs = Presentation(pptx_path)
    audio_files = []
    for i, slide in enumerate(prs.slides):
        if slide.has_notes_slide:
            notes = slide.notes_slide.notes_text_frame.text
            if notes.strip():  # Check if there are non-empty notes
                audio_path = os.path.join(output_dir, f'slide_{i+1}.mp3')
                tts = gTTS(text=notes, lang='en')
                tts.save(audio_path)
                audio_files.append(audio_path)
    return audio_files

def create_video_from_images_and_audio(image_dir, audio_files, video_path):
    """Create a video from images and audio using ffmpeg."""
    # Create video from images
    image_cmd = [
        'ffmpeg', '-y', '-framerate', '1', '-pattern_type', 'glob',
        '-i', os.path.join(image_dir, '*.png'),
        '-c:v', 'libx264', '-pix_fmt', 'yuv420p',
        '-r', '1',  # Ensure each image is shown for 1 second
        '-vf', 'scale=1280:720',  # Resize if needed
        os.path.join(image_dir, 'temp_video.mp4')
    ]
    subprocess.run(image_cmd, check=True)

    # Combine video with audio
    audio_cmds = []
    for i, audio_file in enumerate(audio_files):
        audio_cmd = [
            'ffmpeg', '-y', '-i', os.path.join(image_dir, 'temp_video.mp4'),
            '-i', audio_file, '-c:v', 'copy', '-c:a', 'aac',
            '-b:a', '192k', '-shortest', os.path.join(image_dir, f'final_{i}.mp4')
        ]
        subprocess.run(audio_cmd, check=True)
        audio_cmds.append(os.path.join(image_dir, f'final_{i}.mp4'))

    if not audio_cmds:
        return False

    # Concatenate all audio and video segments
    concat_list_path = os.path.join(image_dir, 'concat_list.txt')
    with open(concat_list_path, 'w') as f:
        for file in audio_cmds:
            f.write(f"file '{file}'\n")
    
    concat_cmd = [
        'ffmpeg', '-y', '-f', 'concat', '-safe', '0', '-i', concat_list_path,
        '-c', 'copy', video_path
    ]
    subprocess.run(concat_cmd, check=True)
    return True

@app.route('/generate-video', methods=['POST'])
def generate_video():
    data = request.json
    topic = data.get('topic')
    content = data.get('content')
    code = data.get('code')

    if not topic or not content or not code:
        return jsonify({"error": "Topic, content, and code are required"}), 400

    summary = summarize_text(content)

    pptx_path = os.path.join(os.getcwd(), 'presentation.pptx')
    image_dir = os.path.join(os.getcwd(), 'images')
    video_path = os.path.join(os.getcwd(), 'final_video.mp4')

    # Ensure directories exist
    if not os.path.exists(image_dir):
        os.makedirs(image_dir)

    create_pptx(topic, summary, code, pptx_path)
    convert_pptx_to_images(pptx_path, image_dir)

    # Create audio for the summary
    summary_audio_path = create_audio_for_summary(summary, image_dir)

    # Create audio for slides' notes
    slide_audio_files = create_audio_for_slides(pptx_path, image_dir)
    audio_files = [summary_audio_path] + slide_audio_files

    if not audio_files:
        return jsonify({"error": "No audio files created"}), 500

    video_created = create_video_from_images_and_audio(image_dir, audio_files, video_path)

    if not video_created:
        return jsonify({"error": "Video creation failed"}), 500

    return jsonify({"message": "Video created successfully", "video_file": video_path})

if __name__ == '__main__':
    app.run(debug=True)